name: Build and Publish Dev Container Images
on: push

env:
  REGISTRY: ghcr.io
  CD_IMAGE_NAME: cloud-developer
  CD_IMAGE_PATH: psi-polska/devcontainers/cloud-developer
  WEB_IMAGE_NAME: web-developer
  WEB_IMAGE_PATH: psi-polska/devcontainers/web-developer

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: (CD) Extract metadata
        id: meta-cd
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.CD_IMAGE_PATH }}

      - name: (CD) Build and push
        id: build-cd
        uses: docker/build-push-action@v6
        with:
          context: src/${{ env.CD_IMAGE_NAME }}
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ env.REGISTRY }}/${{ env.CD_IMAGE_PATH }}
          labels: ${{ steps.meta-cd.outputs.labels }}

      - name: (CD) Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.CD_IMAGE_PATH }}
          format: 'sarif'
          output: 'trivy-cd.sarif'

      - name: (CD) Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-cd.sarif'

      - name: (CD) Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.CD_IMAGE_PATH}}
          subject-digest: ${{ steps.build-cd.outputs.digest }}
          push-to-registry: ${{ github.ref == 'refs/heads/main' }}

      - name: (WEB) Extract metadata
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_PATH }}

      - name: (WEB) Build and push
        id: build-web
        uses: docker/build-push-action@v6
        with:
          context: src/${{ env.WEB_IMAGE_NAME }}
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_PATH }}
          labels: ${{ steps.meta-web.outputs.labels }}

      - name: (WEB) Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_PATH}}
          subject-digest: ${{ steps.build-web.outputs.digest }}
          push-to-registry: ${{ github.ref == 'refs/heads/main' }}
